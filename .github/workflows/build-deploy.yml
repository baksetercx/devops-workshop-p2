name: Build and Deploy

on:
  pull_request:
    branches:
      - master

env:
  NAMESPACE_NAME: '${{ github.head_ref }}'

jobs:
  build:
    name: 'Build Docker image for ${{ matrix.application }}'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        application:
#         - frontend
          - backend
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to registry
        uses: docker/build-push-action@v5
        with:
          push: 'true'
          tags: 'ghcr.io/${{ github.repository }}/${{ matrix.application }}/${{ github.head_ref }}:latest'
          context: ${{ matrix.application }}

  deploy:
    name: 'Deploy ${{ matrix.application }} to Kubernetes'
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        application:
#         - frontend
          - backend
      fail-fast: false
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ${{ matrix.application }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

      - name: Run kubectl apply
        run: |
          sed \
            -i "s|<NAMESPACE_NAME>|$NAMESPACE_NAME|g; s|<IMAGE_NAME>|$IMAGE_NAME|g; s|<DEPLOYMENT_NAME>|$DEPLOYMENT_NAME|g" \
           resources.yml

          # For debugging purposes
          cat resources.yml

          kubectl apply -f resources.yml

          kubectl -n "$NAMESPACE_NAME" rollout status "deployment/$DEPLOYMENT_NAME"

          # Wait for the node port to be assigned
          node_port=""
          while [ -z $node_port ]; do
            echo "Waiting for node port..."
            external_ip=$(kubectl -n "$NAMESPACE_NAME" get svc "$DEPLOYMENT_NAME" --output="jsonpath={.spec.ports[0].nodePort}")
            [ -z "$node_port" ] && sleep 10
          done

          echo "IP with port is: $NODE_IP:$external_ip"
        env:
          IMAGE_NAME: 'ghcr.io/${{ github.repository }}/${{ matrix.application }}/${{ github.head_ref }}:latest'
          DEPLOYMENT_NAME: ${{ matrix.application }}
          NODE_IP: ${{ secrets.NODE_IP }}
